import { Events, ChannelType, PermissionFlagsBits, Colors, Client, Guild } from "discord.js";
import { BotEvent } from "../types";

const event: BotEvent = {
  name: Events.ClientReady,
  once: true,
  async execute(client: Client) {
    console.log(`‚úÖ Ready! Logged in as ${client.user?.tag}`);
    client.user?.setActivity("Minecraft");

    // Noms des salons √† cr√©er
    const channelNames: string[] = [
      "ü¶¶logs-global",
      "üçúlogs-edit-suppression",
      "‚ùålogs-erreur",
    ];

    // ID du serveur
    const guildId = process.env.GUILD_ID;
    if (!guildId) {
      console.error("‚ùå GuildId non trouv√©e");
      return;
    }

    // Nom de la cat√©gorie
    const categoryName = process.env.CATEGORY_NAME;
    if (!categoryName) {
      console.error("‚ùå CategoryName non trouv√©e");
      return;
    }

    // Nom du r√¥le
    const roleName = process.env.ROLE_NAME;
    if (!roleName) {
      console.error("‚ùå RoleName non trouv√©e");
      return;
    }

    // Tableau pour stocker les noms des salons existants
    const channelsDiscord: string[] = [];

    try {
      // R√©cup√®re la guild
      const guild: Guild | undefined = client.guilds.cache.get(guildId);
      if (!guild) {
        console.error("‚ùå Guild non trouv√©e");
        return;
      }

      // R√©cup√®re la liste des salons et stocke les noms dans un tableau
      guild.channels.cache.forEach((channel) => {
        channelsDiscord.push(channel.name);
      });

      // V√©rifie si le r√¥le existe d√©j√†
      let role = guild.roles.cache.find((r) => r.name === roleName);
      if (!role) {
        // Cr√©e un r√¥le sp√©cifique
        role = await guild.roles.create({
          name: roleName,
          color: Colors.Blue,
          reason: "Role sp√©cifique pour la cat√©gorie",
        });
        console.log(`‚úÖ R√¥le "${roleName}" cr√©√© !`);
      } else {
        console.log(`‚ÑπÔ∏è  Le r√¥le "${roleName}" existe d√©j√†`);
      }

      // V√©rifie si la cat√©gorie existe d√©j√†
      let category = guild.channels.cache.find(
        (channel) =>
          channel.name === categoryName &&
          channel.type === ChannelType.GuildCategory
      );

      if (category) {
        console.log(`‚ÑπÔ∏è  La cat√©gorie "${categoryName}" existe d√©j√†`);
      } else {
        // Cr√©e une cat√©gorie avec les permissions pour le r√¥le sp√©cifique
        category = await guild.channels.create({
          name: categoryName,
          type: ChannelType.GuildCategory,
          permissionOverwrites: [
            {
              id: guild.id, // ID du serveur
              deny: [PermissionFlagsBits.ViewChannel], // Interdire la vue des salons √† tout le monde par d√©faut
            },
            {
              id: role.id, // ID du r√¥le sp√©cifique
              allow: [PermissionFlagsBits.ViewChannel], // Autoriser la vue des salons pour le r√¥le sp√©cifique
            },
          ],
        });
        console.log(`‚úÖ Cat√©gorie "${categoryName}" cr√©√©e avec les permissions !`);
      }

      // Cr√©e des salons √† l'int√©rieur de la cat√©gorie avec les m√™mes permissions
      for (const channelName of channelNames) {
        if (channelsDiscord.includes(channelName)) {
          console.log(`‚ÑπÔ∏è  Le salon "${channelName}" existe d√©j√†`);
        } else {
          await guild.channels.create({
            name: channelName,
            type: ChannelType.GuildText,
            parent: category.id,
            permissionOverwrites: [
              {
                id: guild.id,
                deny: [PermissionFlagsBits.ViewChannel],
              },
              {
                id: role.id,
                allow: [PermissionFlagsBits.ViewChannel],
              },
            ],
          });
          console.log(`‚úÖ Salon "${channelName}" cr√©√© !`);
        }
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la cr√©ation des salons : ${error}`);
    }
  },
};

export default event;
